(function(){const o=document.createElement("link").relList;if(o&&o.supports&&o.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))s(e);new MutationObserver(e=>{for(const t of e)if(t.type==="childList")for(const c of t.addedNodes)c.tagName==="LINK"&&c.rel==="modulepreload"&&s(c)}).observe(document,{childList:!0,subtree:!0});function n(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?t.credentials="include":e.crossOrigin==="anonymous"?t.credentials="omit":t.credentials="same-origin",t}function s(e){if(e.ep)return;e.ep=!0;const t=n(e);fetch(e.href,t)}})();document.addEventListener("DOMContentLoaded",()=>{const r=document.querySelector(".header__menu"),o=document.querySelector(".header__burger");r.addEventListener("click",()=>{menu.classList.toggle("open"),o.classList.toggle("open"),r.classList.toggle("open")})});const i={},l=new IntersectionObserver(r=>{r.forEach(o=>{console.log(o.target);let n=o.target.querySelectorAll(".animItem");o.isIntersecting&&(n.forEach(s=>{s.classList.add("startAnim")}),console.log(o.intersectionRatio))})},i);document.querySelectorAll("section").forEach(r=>{console.log(r),l.observe(r)});
